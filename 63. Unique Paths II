class Solution {
public:
    long long dp[105][105];
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        
        int n = obstacleGrid.size();
        int m = obstacleGrid[0].size();

        if(obstacleGrid[0][0] || obstacleGrid[n-1][m-1]) {
            return 0;
        }

        if(m==1 || n==1) {
            return 1;
        }

        bool f = false;

        for(int i=n-1; i>=0; i--) {
            if(obstacleGrid[i][m-1] || f) {
                f=true;
                dp[i][m-1] = 0;
            } else {
                dp[i][m-1] = 1;
            }
         
        }
        f = false;

        for(int i=m-1; i>=0; i--) {
            if(obstacleGrid[n-1][i] || f) {
                f=true;
                dp[n-1][i]=0;
            } else {
                dp[n-1][i]=1;
            }
            
        }

        // for(int i=0; i<=n-1; i++) {
        //     for(int j=0; j<=m-1; j++) {
        //         cout<<dp[i][j];
        //     }
        //     cout<<endl;
        // }
    

        for(int i=n-2; i>=0; i--) {
            for(int j=m-2; j>=0; j--) {
                if(obstacleGrid[i][j]) {
                   dp[i][j] = 0;
                } else {
                    if(i<0 || j<0 || i+1>=n || j+1>=m) {

                    } else {
                        dp[i][j] = dp[i+1][j] + dp[i][j+1];
                    }
                }
            }
        }
        return dp[0][0];
    }
};
