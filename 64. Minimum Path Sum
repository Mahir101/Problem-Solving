class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(i==0 && j==0) 
			        grid[i][j] = grid[i][j];
                else if(i==0 && j!=0) 
			        grid[i][j]=grid[i][j]+grid[i][j-1];
                else if(j==0 && i!=0) 
		            grid[i][j]=grid[i][j]+grid[i-1][j];
                else 
		            grid[i][j]=grid[i][j]+min(grid[i-1][j], grid[i][j-1]);
            }
        }
        return grid[n-1][m-1];
    }
};

// if you know you know -_-

class Solution {
public:
    int dp[201][201];

    int minPathSum(vector<vector<int>>& grid) {

        int n = grid.size();
        int m = grid[0].size();

        dp[n-1][m-1] = grid[n-1][m-1];

        for(int i=n-2; i>=0; i--) {
            dp[i][m-1] = grid[i][m-1] + dp[i+1][m-1];
        }

        for(int i=m-2; i>=0; i--) {
            dp[n-1][i] = grid[n-1][i] + dp[n-1][i+1];
        }

        for(int i=0; i<=n-1; i++) {
            for(int j=0; j<=m-1; j++) {
                cout<<dp[i][j]<<" ";
            }
            cout<<endl;
        }

        for(int i=n-2; i>=0; i--) {
            for(int j=m-2; j>=0; j--) {
                dp[i][j] = grid[i][j] + min(dp[i+1][j], dp[i][j+1]);
            }
        }
        return dp[0][0];
    }

};
